version: "3.8"

services:
  crud-service:
    build:
      context: .
      dockerfile: crud-service/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/hotel_db
      - SPRING_R2DBC_USERNAME=${DB_USERNAME}
      - SPRING_R2DBC_PASSWORD=${DB_PASSWORD}
      - AUTH_SERVER_URL=${AUTH_SERVER_URL}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./logs/crud-service:/app/logs
    depends_on:
      - postgres
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 60s

  booking-service:
    build:
      context: .
      dockerfile: booking-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/hotel_db
      - SPRING_R2DBC_USERNAME=${DB_USERNAME}
      - SPRING_R2DBC_PASSWORD=${DB_PASSWORD}
      - AUTH_SERVER_URL=${AUTH_SERVER_URL}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./logs/booking-service:/app/logs
    depends_on:
      - postgres
      - crud-service
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 60s

  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/hotel_db
      - SPRING_R2DBC_USERNAME=${DB_USERNAME}
      - SPRING_R2DBC_PASSWORD=${DB_PASSWORD}
      - AUTH_SERVER_URL=${AUTH_SERVER_URL}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./logs/payment-service:/app/logs
    depends_on:
      - postgres
      - crud-service
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hotel_db
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  hotel-network:
    driver: bridge

volumes:
  postgres-data:
